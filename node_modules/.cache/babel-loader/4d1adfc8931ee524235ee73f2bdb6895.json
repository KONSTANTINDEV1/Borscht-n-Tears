{"ast":null,"code":"import React, { Component } from 'react';\nimport { createPortal } from 'react-dom';\nimport imagesloaded from 'imagesloaded';\nimport PropTypes from 'prop-types';\nconst canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n\nclass FlickityComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      flickityReady: false,\n      flickityCreated: false,\n      cellCount: 0\n    };\n    this.carousel = null;\n    this.flkty = null;\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const cellCount = React.Children.count(props.children);\n    if (cellCount !== state.cellCount) return {\n      flickityReady: false,\n      cellCount\n    };\n    return null;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      children,\n      options: {\n        draggable,\n        initialIndex\n      },\n      reloadOnUpdate,\n      disableImagesLoaded\n    } = this.props;\n    const {\n      flickityReady\n    } = this.state;\n\n    if (reloadOnUpdate || !prevState.flickityReady && flickityReady) {\n      const isActive = this.flkty.isActive;\n      this.flkty.deactivate();\n      this.flkty.selectedIndex = initialIndex || 0;\n      this.flkty.options.draggable = draggable === undefined ? children ? children.length > 1 : false : draggable;\n      if (isActive) this.flkty.activate();\n\n      if (!disableImagesLoaded && this.carousel) {\n        imagesloaded(this.carousel, () => {\n          this.flkty.reloadCells();\n        });\n      }\n    } else {\n      this.flkty.reloadCells();\n    }\n  }\n\n  componentDidMount() {\n    if (!canUseDOM) return null;\n\n    const Flickity = require('flickity');\n\n    const {\n      flickityRef,\n      options\n    } = this.props;\n    this.flkty = new Flickity(this.carousel, options);\n    if (flickityRef) flickityRef(this.flkty);\n\n    if (this.props.static) {\n      this.setReady();\n    } else {\n      this.setState({\n        flickityCreated: true\n      });\n    }\n  }\n\n  setReady() {\n    if (this.state.flickityReady) return;\n\n    const setFlickityToReady = () => this.setState({\n      flickityReady: true\n    });\n\n    if (this.props.disableImagesLoaded) setFlickityToReady();else imagesloaded(this.carousel, setFlickityToReady);\n  }\n\n  renderPortal() {\n    if (!this.carousel) return null;\n    const mountNode = this.carousel.querySelector('.flickity-slider');\n\n    if (mountNode) {\n      const element = createPortal(this.props.children, mountNode);\n      setTimeout(() => this.setReady(), 0);\n      return element;\n    }\n  }\n\n  render() {\n    return React.createElement(this.props.elementType, {\n      className: this.props.className,\n      ref: c => {\n        this.carousel = c;\n      }\n    }, this.props.static ? this.props.children : this.renderPortal());\n  }\n\n}\n\nFlickityComponent.propTypes = {\n  children: PropTypes.array,\n  className: PropTypes.string,\n  disableImagesLoaded: PropTypes.bool,\n  elementType: PropTypes.string,\n  flickityRef: PropTypes.func,\n  options: PropTypes.object,\n  reloadOnUpdate: PropTypes.bool,\n  static: PropTypes.bool\n};\nFlickityComponent.defaultProps = {\n  className: '',\n  disableImagesLoaded: false,\n  elementType: 'div',\n  options: {},\n  reloadOnUpdate: false,\n  static: false\n};\nexport default FlickityComponent;","map":{"version":3,"sources":["/Users/Musicaddict1/Desktop/WEB DEV/BORSHCT/borscht-website2/node_modules/react-flickity-component/src/index.js"],"names":["React","Component","createPortal","imagesloaded","PropTypes","canUseDOM","window","document","createElement","FlickityComponent","constructor","props","state","flickityReady","flickityCreated","cellCount","carousel","flkty","getDerivedStateFromProps","Children","count","children","componentDidUpdate","prevProps","prevState","options","draggable","initialIndex","reloadOnUpdate","disableImagesLoaded","isActive","deactivate","selectedIndex","undefined","length","activate","reloadCells","componentDidMount","Flickity","require","flickityRef","static","setReady","setState","setFlickityToReady","renderPortal","mountNode","querySelector","element","setTimeout","render","elementType","className","ref","c","propTypes","array","string","bool","func","object","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { createPortal } from 'react-dom';\nimport imagesloaded from 'imagesloaded';\nimport PropTypes from 'prop-types';\n\nconst canUseDOM = !!(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\nclass FlickityComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      flickityReady: false,\n      flickityCreated: false,\n      cellCount: 0,\n    };\n\n    this.carousel = null;\n    this.flkty = null;\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const cellCount = React.Children.count(props.children);\n    if (cellCount !== state.cellCount)\n      return { flickityReady: false, cellCount };\n    return null;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      children,\n      options: { draggable, initialIndex },\n      reloadOnUpdate,\n      disableImagesLoaded,\n    } = this.props;\n    const { flickityReady } = this.state;\n    if (reloadOnUpdate || (!prevState.flickityReady && flickityReady)) {\n      const isActive = this.flkty.isActive;\n      this.flkty.deactivate();\n      this.flkty.selectedIndex = initialIndex || 0;\n      this.flkty.options.draggable =\n        draggable === undefined\n          ? children\n            ? children.length > 1\n            : false\n          : draggable;\n      if (isActive) this.flkty.activate();\n      if (!disableImagesLoaded && this.carousel) {\n        imagesloaded(this.carousel, () => {\n          this.flkty.reloadCells();\n        });\n      }\n    } else {\n      this.flkty.reloadCells();\n    }\n  }\n\n  componentDidMount() {\n    if (!canUseDOM) return null;\n    const Flickity = require('flickity');\n    const { flickityRef, options } = this.props;\n    this.flkty = new Flickity(this.carousel, options);\n    if (flickityRef) flickityRef(this.flkty);\n    if (this.props.static) {\n      this.setReady();\n    } else {\n      this.setState({ flickityCreated: true });\n    }\n  }\n\n  setReady() {\n    if (this.state.flickityReady) return;\n    const setFlickityToReady = () => this.setState({ flickityReady: true });\n    if (this.props.disableImagesLoaded) setFlickityToReady();\n    else imagesloaded(this.carousel, setFlickityToReady);\n  }\n\n  renderPortal() {\n    if (!this.carousel) return null;\n    const mountNode = this.carousel.querySelector('.flickity-slider');\n    if (mountNode) {\n      const element = createPortal(this.props.children, mountNode);\n      setTimeout(() => this.setReady(), 0);\n      return element;\n    }\n  }\n\n  render() {\n    return React.createElement(\n      this.props.elementType,\n      {\n        className: this.props.className,\n        ref: (c) => {\n          this.carousel = c;\n        },\n      },\n      this.props.static ? this.props.children : this.renderPortal()\n    );\n  }\n}\n\nFlickityComponent.propTypes = {\n  children: PropTypes.array,\n  className: PropTypes.string,\n  disableImagesLoaded: PropTypes.bool,\n  elementType: PropTypes.string,\n  flickityRef: PropTypes.func,\n  options: PropTypes.object,\n  reloadOnUpdate: PropTypes.bool,\n  static: PropTypes.bool,\n};\n\nFlickityComponent.defaultProps = {\n  className: '',\n  disableImagesLoaded: false,\n  elementType: 'div',\n  options: {},\n  reloadOnUpdate: false,\n  static: false,\n};\n\nexport default FlickityComponent;\n"]},"metadata":{},"sourceType":"module"}